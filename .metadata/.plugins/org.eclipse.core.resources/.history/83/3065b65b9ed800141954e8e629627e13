import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.UnknownHostException;

import org.apache.zookeeper.CreateMode;
import org.apache.zookeeper.KeeperException;
import org.apache.zookeeper.WatchedEvent;
import org.apache.zookeeper.Watcher;
import org.apache.zookeeper.KeeperException.Code;
import org.apache.zookeeper.Watcher.Event.EventType;
import org.apache.zookeeper.data.Stat;

public class ClientDriver {
	ZkConnector zkc;
    Watcher watcher;
    static String myPath = "/tracker";
    static String trackerIP = null;
    
    public static void main(String[] args) throws IOException, KeeperException, InterruptedException
    {
    	// connect to zookeeper
    	if (args.length != 1) {
            System.out.println("Usage: java -classpath lib/zookeeper-3.3.2.jar:lib/log4j-1.2.15.jar:. Test zkServer:clientPort");
            return;
        }
    	
    	// handle user requests
    	ClientDriver client = new ClientDriver(args[0]);
    	client.checkUpdate();
    	
    	Thread t = new Thread() {
    	    public void run() {
    	    	while (true)
    	    	{
    	    		System.out.print(">> ");
    	    		
    			    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    			 
    			    String userInput = null;
    			    
    			    try {
						userInput = br.readLine();
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
    			    
    			    System.out.println(userInput);
    	    	}
    	    }
    	};
    	t.start();
    }
    
    public ClientDriver(String hosts) throws UnknownHostException, KeeperException, InterruptedException {
    	zkc = new ZkConnector();
        try {
            zkc.connect(hosts);
        } catch(Exception e) {
            System.out.println("Zookeeper connect "+ e.getMessage());
        }
 
        watcher = new Watcher() { // Anonymous Watcher
                            @Override
                            public void process(WatchedEvent event) {
                                handleEvent(event);
                        
                            } };                    
    }
    
    private void checkUpdate() {
        Stat stat = zkc.exists(myPath, watcher);
        if (stat != null) {              // znode does exist; read data
        	
        	byte[] data = null;
			try {
				data = zkc.read(myPath);
			} catch (KeeperException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
        	trackerIP = new String(data);
        	System.out.println("tracker IP: "+ trackerIP);
//            System.out.println("Creating " + myPath);
//            Code ret = zkc.create(
//                        myPath,         // Path of znode
//                        null,           // Data not needed.
//                        CreateMode.EPHEMERAL   // Znode type, set to EPHEMERAL.
//                        );
//            if (ret == Code.OK) System.out.println("the boss!");
        } 
    }

    private void handleEvent(WatchedEvent event) {
        String path = event.getPath();
        EventType type = event.getType();
        if(path.equalsIgnoreCase(myPath)) {
            if (type == EventType.NodeDeleted) {
                System.out.println(myPath + " deleted! Let's go!");       
                checkUpdate(); // try to reconnect
            }
            if ((type == EventType.NodeCreated) || (type == EventType.NodeDataChanged)) {
                System.out.println(myPath + " created!");       
                //try{ Thread.sleep(5000); } catch (Exception e) {}
                checkUpdate(); // re-enable the watch
            }
        }
    }
}
