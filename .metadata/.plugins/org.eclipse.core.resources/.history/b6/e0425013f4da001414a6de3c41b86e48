import org.apache.zookeeper.KeeperException;
import org.apache.zookeeper.KeeperException.Code;
import org.apache.zookeeper.WatchedEvent;
import org.apache.zookeeper.Watcher;
import org.apache.zookeeper.ZooKeeper;
import org.apache.zookeeper.CreateMode;
import org.apache.zookeeper.ZooDefs.Ids;
import org.apache.zookeeper.data.Stat;
import org.apache.zookeeper.Watcher.Event.EventType;

import java.io.IOException;

public class Worker {
    
    String workerPath = "/worker";
    String assignPath = "/assign";
    int sequenceNum = 0;
    ZkConnector zkc;
    Watcher watcherAssign;

    public static void main(String[] args) {
      
        if (args.length != 1) {
            System.out.println("Usage: java -classpath lib/zookeeper-3.3.2.jar:lib/log4j-1.2.15.jar:. Test zkServer:clientPort");
            return;
        }

        Worker worker = new Worker(args[0]);   
 
        System.out.println("Sleeping...");
        try {
            Thread.sleep(5000);
        } catch (Exception e) {}
        // create the worker root node if not already created
        worker.createWorkerRoot();
        worker.createAssignRoot(); 
        
        worker.getSequenceNumber();
        worker.createAssignNode();
        worker.createNode();
        
        // set watch
        worker.checkAssign();
        
        
        System.out.println("Sleeping...");
        while (true) {
            try{ Thread.sleep(5000); } catch (Exception e) {}
        }
    }

    public Worker(String hosts) {
        zkc = new ZkConnector();
        try {
            zkc.connect(hosts);
        } catch(Exception e) {
            System.out.println("Zookeeper connect "+ e.getMessage());
        }
 
        watcherAssign = new Watcher() { // Anonymous Watcher
                            @Override
                            public void process(WatchedEvent event) {
                                handleEventAssign(event);
                        
                            } };
    }
    
    private void getSequenceNumber()
    {
    	while (zkc.exists(workerPath + "/worker-" + sequenceNum, true) != null)
    	{
    		sequenceNum ++;
    	}
    }
    
    private void checkAssign() {
        // check children
    	Stat stat = zkc.exists(assignPath + "/worker-" + sequenceNum, watcherAssign);
    }
    
    private void createNode()
    {
    	Stat stat = zkc.exists(workerPath + "/worker-" + sequenceNum, true);
		
    	// taking care of race
		while (stat == null)
		{
			
		}
		
		
		
	    Code ret = zkc.create(
	    			workerPath + "/worker-" + sequenceNum,         // Path of znode
	                null,           // Data not needed.
	                CreateMode.EPHEMERAL   // Znode type, set to EPHEMERAL.
	                );
	    if (ret == Code.OK) System.out.println("created worker!" + assignPath + "/worker-" + sequenceNum);
		
	}
    
    private void createAssignNode()
    {
    	//Stat stat = zkc.exists(assignPath + "/worker-" + sequenceNum, true);

	    Code ret = zkc.create(
	    			assignPath + "/worker-" + sequenceNum,         // Path of znode
	                null,           // Data not needed.
	                CreateMode.PERSISTENT   // Znode type, set to PERSISTEN
	                						// if the worker is dead, the job tracker will remove this
	                );
	    if (ret == Code.OK) System.out.println("created assign!"  + assignPath + "/worker-" + sequenceNum);
 
	}

    private void createWorkerRoot() {
        Stat stat = zkc.exists(workerPath, true);
        if (stat == null) {              // znode doesn't exist; let's try creating it
            Code ret = zkc.create(
                        workerPath,         // Path of znode
                        null,           // Data not needed.
                        CreateMode.PERSISTENT   // Znode type, set to PERSISTENT.
                        );
            if (ret == Code.OK) System.out.println("the worker root created!!");
        } 
    }
    
    private void createAssignRoot() {
        Stat stat = zkc.exists(assignPath, true);
        if (stat == null) {              // znode doesn't exist; let's try creating it
            Code ret = zkc.create(
            			assignPath,         // Path of znode
                        null,           // Data not needed.
                        CreateMode.PERSISTENT   // Znode type, set to PERSISTENT.
                        );
            if (ret == Code.OK) System.out.println("the assign root created!!");
        } 
    }
    
    private String ProcessHash(String passwordhash) {
		// TODO Auto-generated method stub
		return passwordhash.toUpperCase() + "cracked";
	}
    
    private void handleEventAssign(WatchedEvent event) {
        String path = event.getPath();
        EventType type = event.getType();
        String mypath = "/worker-" + sequenceNum;
        if(path.equalsIgnoreCase(assignPath + mypath)) {
            if (type == EventType.NodeDataChanged) {
            	// run the job
                // re-enable the watch
            	checkAssign();
            	
            	byte[] data = null;
    			try {
    				data = zkc.read(assignPath +mypath);
    			} catch (KeeperException e) {
    				// TODO Auto-generated catch block
    				e.printStackTrace();
    			} catch (InterruptedException e) {
    				// TODO Auto-generated catch block
    				e.printStackTrace();
    			}
    			// read task content
            	String passwordhash = new String(data);
            	System.out.println("hash received! " + passwordhash);
            	
            	// processing here
            	String result = ProcessHash(passwordhash);
            	
            	// now put the result back in my own worker node
            	try {
					zkc.update(workerPath +mypath, result.getBytes());
				} catch (KeeperException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        }
    }

}
